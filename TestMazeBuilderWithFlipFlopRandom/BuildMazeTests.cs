using System.Collections.Generic;
using System.Linq;
using Amazing;
using Amazing.Core;
using Amazing.Gateway;
using Dependency;
using FluentAssertions;
using TestMazeBuilder.Fakes;
using Xunit;

namespace TestMazeBuilder
{
    public class BuildMazeTests
    {
        [Fact]
        public void TestBuildMaze()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeFlipFlopRandom());
            var maze = Maze.BuildMaze(5,5);

            var expectation = new []
            {
              new[] {2,2,2,2,3},
              new[] {3,1,1,3,1},
              new[] {1,0,3,0,1},
              new[] {1,3,0,3,0},
              new[] {1,0,0,1,3},
              new[] {2,0,3,2,0}
            };

            maze.Should().BeEquivalentTo(expectation);
        }

        [Fact]
        public void TestBuildMaze2()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeFlipFlopRandom(false));
            var maze = Maze.BuildMaze(5, 5);

            var expectation = new []
            {
                new [] {3,3,2,3,3,0},
                new [] {2,0,1,0,2,3},
                new [] {2,3,1,0,1,2},
                new [] {2,1,2,3,2,2},
                new [] {2,0,1,0,1,0}
            };

            maze.Should().BeEquivalentTo(TransposeMatrix(expectation));
        }

        private static IEnumerable<IEnumerable<int>> TransposeMatrix(IEnumerable<IEnumerable<int>> expectation)
        {
            var array = expectation.ToArray();
            return Enumerable.Range(0, array.First().Count())
                .Select(i => array.Select(row => row.Skip(i).First()).ToList()).Cast<IEnumerable<int>>().ToList();
        }

        [Fact]
        public void TestBuildMaze3()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeSequenceRandom(0));
            var maze = Maze.BuildMaze(5, 5);

            var expectation = new []
            {
               
                new [] {2,3,1,1,1,2},
                new [] {3,2,2,3,2,2},
                new [] {2,2,1,0,1,0},
                new [] {2,3,3,0,3,2},
                new [] {2,0,1,1,0,1}
            };

            maze.Should().BeEquivalentTo(TransposeMatrix(expectation));
        }

        [Fact]
        public void TestBuildMazeBig()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeSequenceRandom(15));
            var maze = Maze.BuildMaze(20, 20);

            var expectation = new []
            {
                new [] {2,1,1,2,3,2,1,1,2,3,1,1,1,1,1,1,2,3,3,2,2},
                new [] {2,3,1,0,2,1,3,1,0,1,3,1,1,1,1,2,1,0,2,1,2},
                new [] {2,2,3,2,2,1,0,1,3,1,0,2,3,1,1,0,3,2,2,3,0},
                new [] {2,2,2,2,3,3,1,2,2,1,2,3,0,1,3,1,0,0,2,1,2},
                new [] {2,3,0,1,0,2,2,2,1,2,2,1,1,1,0,1,1,3,0,1,0},
                new [] {2,3,2,3,2,1,0,1,2,2,1,1,2,3,2,3,2,2,3,1,2},
                new [] {2,2,2,2,1,1,2,3,0,1,1,2,1,0,1,2,1,0,1,2,2},
                new [] {2,2,1,0,2,3,2,1,2,3,2,1,2,3,1,1,0,3,1,0,2},
                new [] {2,1,2,2,3,0,0,3,0,2,1,1,0,0,3,1,3,0,3,2,2},
                new [] {2,3,0,1,0,3,2,1,2,3,1,2,1,1,1,0,2,3,0,1,0},
                new [] {2,1,1,2,3,0,1,2,1,0,2,1,1,1,1,1,0,1,2,3,2},
                new [] {2,3,2,2,2,1,1,0,3,1,1,0,3,1,1,1,1,3,0,0,2},
                new [] {2,2,1,2,1,1,1,2,1,1,1,1,1,2,1,1,1,0,3,3,0},
                new [] {2,1,2,2,3,3,3,0,3,1,1,3,2,1,1,1,1,1,0,2,2},
                new [] {2,3,0,0,2,2,1,0,1,2,3,0,1,1,1,1,2,3,0,1,2},
                new [] {3,1,1,1,2,1,1,3,0,2,2,3,1,2,3,1,0,1,2,3,0},
                new [] {2,3,2,2,1,1,2,2,3,0,1,0,3,0,1,1,1,2,1,1,2},
                new [] {2,2,1,0,3,1,0,1,1,1,1,2,1,1,2,3,0,1,3,2,0},
                new [] {2,2,3,2,3,1,2,2,3,1,2,0,3,2,2,2,3,2,2,2,3},
                new [] {2,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0}
            };

            maze.Should().BeEquivalentTo(TransposeMatrix(expectation));
        }

        [Fact]
        public void TestBuildMazeBigger()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeSequenceRandom(15));

            var expectation = new []
            {
                new [] {2, 3, 1, 1, 1, 3, 3, 2, 1, 2, 3, 3, 1, 2, 2, 3, 1, 1, 2, 3, 1, 2, 3, 1, 3, 2, 3, 1, 0, 3, 3, 1, 1, 1, 3, 1, 2, 3, 2, 3, 0},
                new [] {2, 1, 2, 2, 3, 0, 2, 1, 3, 0, 0, 2, 3, 0, 2, 1, 3, 2, 3, 0, 2, 2, 1, 2, 2, 1, 0, 3, 1, 0, 1, 2, 3, 1, 0, 3, 0, 2, 2, 1, 2},
                new [] {2, 3, 0, 3, 0, 1, 0, 1, 0, 3, 2, 2, 2, 3, 3, 2, 2, 0, 1, 1, 0, 1, 2, 2, 1, 3, 0, 2, 3, 1, 1, 0, 1, 1, 2, 3, 1, 0, 2, 3, 2},
                new [] {2, 2, 2, 1, 1, 3, 2, 3, 1, 0, 1, 0, 3, 0, 0, 1, 0, 3, 2, 3, 3, 1, 0, 2, 3, 0, 3, 0, 1, 1, 3, 1, 0, 3, 2, 2, 3, 2, 2, 2, 2},
                new [] {2, 2, 3, 2, 1, 0, 2, 3, 1, 0, 3, 2, 0, 3, 3, 1, 1, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 3, 3, 2, 2, 3, 1, 0, 2, 1, 0, 2, 1, 0, 2},
                new [] {2, 2, 2, 1, 1, 1, 0, 2, 3, 3, 0, 1, 2, 0, 1, 1, 0, 3, 0, 2, 2, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 2, 1, 2, 2, 3, 2, 3, 2, 3, 0},
                new [] {2, 2, 1, 1, 0, 3, 2, 0, 2, 1, 1, 2, 3, 3, 2, 3, 3, 0, 2, 2, 2, 1, 1, 0, 3, 1, 3, 0, 3, 0, 0, 2, 3, 0, 1, 0, 0, 2, 2, 2, 2},
                new [] {2, 2, 3, 2, 3, 0, 1, 2, 1, 2, 3, 0, 2, 2, 3, 2, 1, 1, 0, 2, 1, 2, 1, 3, 2, 3, 0, 3, 0, 1, 3, 0, 2, 3, 1, 1, 1, 0, 0, 1, 0},
                new [] {2, 1, 0, 3, 1, 1, 2, 0, 3, 0, 1, 2, 0, 2, 2, 2, 3, 2, 3, 2, 2, 1, 3, 0, 2, 1, 2, 1, 1, 2, 1, 1, 0, 2, 1, 2, 3, 1, 2, 3, 2},
                new [] {2, 3, 2, 1, 1, 2, 1, 2, 2, 3, 1, 0, 3, 0, 0, 1, 0, 1, 2, 2, 1, 2, 3, 0, 1, 2, 1, 1, 3, 0, 1, 1, 3, 0, 3, 0, 2, 3, 0, 2, 2},
                new [] {2, 2, 2, 3, 2, 1, 2, 1, 0, 2, 3, 1, 0, 3, 1, 1, 2, 3, 0, 1, 1, 0, 1, 2, 1, 0, 3, 2, 1, 2, 3, 1, 1, 2, 3, 1, 0, 1, 1, 0, 2},
                new [] {2, 2, 3, 0, 1, 0, 1, 1, 2, 2, 1, 1, 2, 1, 2, 3, 0, 1, 1, 1, 3, 3, 2, 0, 3, 2, 2, 3, 2, 2, 2, 2, 3, 0, 1, 2, 1, 1, 2, 3, 0},
                new [] {2, 2, 3, 1, 1, 1, 2, 3, 0, 2, 1, 1, 2, 3, 0, 2, 3, 1, 2, 3, 0, 0, 1, 3, 0, 2, 0, 2, 0, 1, 0, 2, 3, 1, 1, 0, 3, 1, 2, 1, 2},
                new [] {2, 2, 1, 2, 3, 0, 2, 2, 2, 2, 3, 1, 0, 2, 2, 2, 1, 2, 1, 0, 3, 3, 2, 2, 2, 1, 2, 1, 1, 1, 3, 1, 0, 1, 1, 1, 3, 2, 0, 3, 2},
                new [] {2, 1, 0, 1, 0, 3, 0, 1, 0, 2, 2, 1, 2, 1, 0, 2, 1, 2, 2, 3, 0, 2, 2, 1, 0, 3, 1, 1, 2, 2, 2, 2, 3, 3, 1, 1, 0, 1, 2, 2, 2},
                new [] {3, 3, 1, 1, 2, 1, 1, 1, 3, 0, 1, 3, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 3, 1, 0, 3, 2, 1, 2, 2, 1, 0, 2, 1, 1, 1, 1, 0, 2, 2},
                new [] {2, 2, 1, 2, 1, 1, 2, 3, 0, 3, 1, 0, 3, 0, 1, 0, 1, 1, 0, 2, 2, 1, 1, 0, 3, 1, 0, 1, 2, 0, 1, 1, 2, 2, 3, 2, 3, 1, 1, 0, 2},
                new [] {2, 1, 1, 0, 3, 3, 0, 3, 2, 1, 1, 1, 0, 3, 2, 3, 2, 3, 2, 2, 1, 3, 3, 1, 2, 1, 1, 2, 2, 3, 2, 3, 0, 2, 2, 2, 2, 2, 3, 1, 0},
                new [] {2, 3, 3, 2, 2, 3, 2, 2, 2, 3, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0, 2, 3, 2, 2, 1, 2, 1, 1, 0, 1, 2, 1, 0, 2, 3, 2, 2},
                new [] {2, 0, 2, 1, 0, 0, 2, 2, 2, 2, 3, 1, 0, 1, 1, 2, 1, 1, 3, 1, 0, 2, 3, 2, 1, 2, 1, 0, 3, 0, 3, 1, 2, 1, 0, 1, 1, 1, 0, 1, 0},
                new [] {2, 3, 0, 1, 1, 2, 2, 2, 2, 2, 2, 3, 2, 3, 0, 1, 3, 0, 3, 3, 2, 2, 2, 1, 2, 2, 2, 3, 1, 1, 0, 2, 1, 3, 1, 1, 3, 1, 0, 3, 2},
                new [] {2, 2, 1, 1, 2, 2, 2, 2, 1, 0, 2, 2, 2, 1, 3, 0, 1, 3, 0, 2, 0, 2, 1, 2, 1, 0, 2, 1, 0, 3, 2, 2, 3, 1, 0, 3, 0, 3, 3, 0, 2},
                new [] {2, 1, 3, 1, 0, 2, 2, 3, 1, 0, 1, 0, 1, 1, 0, 3, 2, 3, 2, 1, 2, 1, 2, 1, 1, 2, 3, 1, 3, 0, 2, 1, 0, 1, 1, 1, 2, 0, 2, 3, 2},
                new [] {2, 2, 2, 3, 2, 1, 0, 2, 3, 1, 1, 1, 2, 1, 3, 0, 1, 0, 1, 2, 1, 2, 1, 3, 2, 2, 1, 0, 1, 2, 0, 3, 1, 1, 1, 2, 1, 1, 0, 0, 2},
                new [] {2, 2, 1, 2, 3, 3, 2, 2, 1, 3, 1, 0, 1, 2, 1, 2, 1, 2, 2, 2, 3, 1, 0, 2, 0, 1, 1, 3, 0, 1, 3, 1, 2, 1, 2, 2, 2, 3, 1, 1, 0},
                new [] {2, 3, 1, 0, 0, 2, 1, 2, 1, 0, 3, 2, 3, 2, 3, 0, 3, 0, 1, 0, 2, 3, 2, 1, 3, 1, 0, 1, 1, 0, 1, 2, 1, 1, 0, 2, 1, 0, 1, 1, 2},
                new [] {2, 1, 1, 1, 2, 1, 2, 2, 3, 2, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 2, 3, 1, 1, 1, 3, 2, 1, 2, 3, 2, 2, 3, 2, 3, 2, 2},
                new [] {2, 2, 3, 2, 2, 1, 0, 2, 2, 1, 1, 2, 1, 1, 1, 1, 3, 1, 0, 2, 2, 0, 1, 0, 0, 1, 1, 0, 3, 0, 1, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2},
                new [] {2, 2, 2, 1, 0, 3, 1, 0, 3, 2, 2, 1, 3, 1, 1, 2, 1, 2, 3, 0, 1, 3, 2, 3, 1, 1, 3, 3, 0, 3, 2, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0},
                new [] {2, 3, 0, 1, 1, 1, 2, 3, 0, 2, 2, 3, 0, 3, 1, 1, 0, 1, 0, 3, 2, 2, 2, 0, 3, 1, 0, 0, 3, 0, 2, 0, 3, 1, 0, 1, 3, 1, 1, 2, 2},
                new [] {2, 2, 3, 1, 1, 0, 1, 1, 0, 2, 2, 1, 2, 1, 1, 1, 3, 1, 0, 2, 2, 2, 1, 1, 0, 3, 1, 2, 3, 0, 1, 2, 1, 1, 0, 3, 0, 3, 2, 1, 0},
                new [] {2, 2, 1, 1, 2, 3, 2, 3, 1, 0, 1, 1, 0, 1, 3, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 0, 2, 1, 2, 2, 1, 2, 3, 2, 2, 3, 0, 1, 1, 2},
                new [] {2, 2, 1, 2, 2, 2, 1, 0, 3, 1, 3, 1, 2, 3, 0, 0, 3, 1, 2, 0, 1, 2, 3, 1, 0, 3, 2, 3, 2, 2, 2, 3, 0, 2, 2, 2, 1, 2, 3, 2, 2},
                new [] {2, 1, 3, 0, 1, 1, 1, 1, 0, 1, 0, 3, 0, 1, 1, 1, 0, 3, 0, 3, 2, 1, 0, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 0, 2, 1, 1, 0, 2, 2, 3},
                new [] {2, 3, 0, 3, 2, 3, 1, 1, 1, 2, 3, 0, 3, 3, 2, 3, 2, 1, 1, 2, 2, 3, 1, 3, 1, 1, 0, 2, 3, 0, 3, 1, 0, 3, 0, 3, 1, 1, 0, 1, 2},
                new [] {2, 2, 3, 0, 1, 0, 1, 2, 3, 1, 0, 3, 0, 0, 1, 0, 2, 3, 2, 0, 2, 1, 2, 2, 3, 1, 3, 0, 3, 0, 1, 2, 2, 3, 1, 1, 0, 3, 0, 3, 2},
                new [] {2, 2, 1, 2, 3, 1, 1, 0, 1, 2, 3, 0, 3, 2, 2, 3, 0, 2, 1, 3, 1, 2, 2, 1, 0, 2, 1, 1, 0, 3, 1, 0, 2, 1, 1, 1, 1, 0, 3, 0, 0},
                new [] {2, 1, 2, 2, 2, 3, 2, 3, 2, 1, 0, 3, 0, 2, 2, 1, 0, 2, 2, 2, 1, 0, 2, 3, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 3, 1, 3, 1, 2, 3, 2},
                new [] {2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 2, 2, 3, 0, 1, 1, 3, 0, 2, 1, 1, 1, 0, 1, 1, 1, 2, 2, 1, 3, 2, 1, 3, 2, 1, 2, 2, 3, 0, 0, 2},
                new [] {2, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0}
             };

            var maze = Maze.BuildMaze(40, 40);

            maze.Should().BeEquivalentTo(TransposeMatrix(expectation));
        }

        [Fact]
        public void TestBuildMazeWithFakeMaxRandom()
        {
            Shelf.ClearInstance<IRandom>();
            Shelf.ShelveInstance<IRandom>(new FakeMaxRandom());
            var maze = Maze.BuildMaze(5, 5);
            var expectation = new []
            {
                new [] {2,3,1,1,3,0},
                new [] {2,3,1,2,3,0},
                new [] {2,2,0,2,3,0},
                new [] {2,2,0,0,3,0},
                new [] {3,0,0,0,1,1}
            };

            maze.Should().BeEquivalentTo(TransposeMatrix(expectation));
        }

        [Fact]
        public void TestBuildMazeWithFakeMedRandom()
        {
            Shelf.ClearInstance<IRandom>();
            Shelf.ShelveInstance<IRandom>(new FakeMedRandom());
            var maze = Maze.BuildMaze(5, 5);
            var expectation = new []
            {
                new [] {2,3,1,1,1,2},
                new [] {2,1,1,2,2,2},
                new [] {3,3,2,1,0,2},
                new [] {2,2,1,1,1,0},
                new [] {2,1,1,1,1,1}
            };

            maze.Should().BeEquivalentTo(TransposeMatrix(expectation));
        }

        [Fact]
        public void TestBuildMazeWithFakeMinRandom()
        {
            Shelf.ClearInstance<IRandom>();
            Shelf.ShelveInstance<IRandom>(new FakeMinRandom());
            var maze = Maze.BuildMaze(5, 5);
            var expectation = new  []
            {
                new [] {3,2,3,2,3,0},
                new [] {2,2,2,2,3,0},
                new [] {2,2,2,2,3,0},
                new [] {2,2,2,2,2,0},
                new [] {2,1,0,1,0,0}
            };

            maze.Should().BeEquivalentTo(TransposeMatrix(expectation));
        }
    }
}