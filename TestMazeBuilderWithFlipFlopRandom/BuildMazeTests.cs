using Amazing;
using Amazing.Gateway;
using Dependency;
using FluentAssertions;
using Xunit;

namespace TestMazeBuilderWithFlipFlopRandom
{
    public class BuildMazeTests
    {
        [Fact]
        public void TestBuildMaze()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeFlipFlopRandom());
            var maze = Maze.BuildMaze(5,5);

            var expectation = new int[,]
            {
                {0,0,0,0,0,0}, 
                {2,3,1,1,1,2}, 
                {2,1,0,3,0,0}, 
                {2,1,3,0,0,3}, 
                {2,3,0,3,1,2}, 
                {3,1,1,0,1,0}
            };

            maze.Should().BeEquivalentTo(expectation);
        }

        [Fact]
        public void TestBuildMaze2()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeFlipFlopRandom(false));
            var maze = Maze.BuildMaze(5, 5);

            var expectation = new int[,]
            {
                {0,0,0,0,0,0},
                {3,3,2,3,3,0},
                {2,0,1,0,2,3},
                {2,3,1,0,1,2},
                {2,1,2,3,2,2},
                {2,0,1,0,1,0}
            };

            maze.Should().BeEquivalentTo(expectation);
        }

        [Fact]
        public void TestBuildMaze3()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeSequenceRandom(0));
            var maze = Maze.BuildMaze(5, 5);
            
            var expectation = new int[,]
            {
                {0,0,0,0,0,0},
                {2,3,1,1,1,2},
                {3,2,2,3,2,2},
                {2,2,1,0,1,0},
                {2,3,3,0,3,2},
                {2,0,1,1,0,1}
            };

            maze.Should().BeEquivalentTo(expectation);
        }

        [Fact]
        public void TestBuildMazeBig()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeSequenceRandom(15));
            var maze = Maze.BuildMaze(20, 20);

            var expectation = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {2,1,1,2,3,2,1,1,2,3,1,1,1,1,1,1,2,3,3,2,2},
                {2,3,1,0,2,1,3,1,0,1,3,1,1,1,1,2,1,0,2,1,2},
                {2,2,3,2,2,1,0,1,3,1,0,2,3,1,1,0,3,2,2,3,0},
                {2,2,2,2,3,3,1,2,2,1,2,3,0,1,3,1,0,0,2,1,2},
                {2,3,0,1,0,2,2,2,1,2,2,1,1,1,0,1,1,3,0,1,0},
                {2,3,2,3,2,1,0,1,2,2,1,1,2,3,2,3,2,2,3,1,2},
                {2,2,2,2,1,1,2,3,0,1,1,2,1,0,1,2,1,0,1,2,2},
                {2,2,1,0,2,3,2,1,2,3,2,1,2,3,1,1,0,3,1,0,2},
                {2,1,2,2,3,0,0,3,0,2,1,1,0,0,3,1,3,0,3,2,2},
                {2,3,0,1,0,3,2,1,2,3,1,2,1,1,1,0,2,3,0,1,0},
                {2,1,1,2,3,0,1,2,1,0,2,1,1,1,1,1,0,1,2,3,2},
                {2,3,2,2,2,1,1,0,3,1,1,0,3,1,1,1,1,3,0,0,2},
                {2,2,1,2,1,1,1,2,1,1,1,1,1,2,1,1,1,0,3,3,0},
                {2,1,2,2,3,3,3,0,3,1,1,3,2,1,1,1,1,1,0,2,2},
                {2,3,0,0,2,2,1,0,1,2,3,0,1,1,1,1,2,3,0,1,2},
                {3,1,1,1,2,1,1,3,0,2,2,3,1,2,3,1,0,1,2,3,0},
                {2,3,2,2,1,1,2,2,3,0,1,0,3,0,1,1,1,2,1,1,2},
                {2,2,1,0,3,1,0,1,1,1,1,2,1,1,2,3,0,1,3,2,0},
                {2,2,3,2,3,1,2,2,3,1,2,0,3,2,2,2,3,2,2,2,3},
                {2,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0}
            };

            maze.Should().BeEquivalentTo(expectation);
        }

        [Fact]
        public void TestBuildMazeBigger()
        {
            Shelf.Clear();
            Shelf.ShelveInstance<IRandom>(new FakeSequenceRandom(15));
            var maze = Maze.BuildMaze(40, 40);

            var expectation = new int[,]
            {
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {2, 3, 1, 1, 1, 3, 3, 2, 1, 2, 3, 3, 1, 2, 2, 3, 1, 1, 2, 3, 1, 2, 3, 1, 3, 2, 3, 1, 0, 3, 3, 1, 1, 1, 3, 1, 2, 3, 2, 3, 0},
                {2, 1, 2, 2, 3, 0, 2, 1, 3, 0, 0, 2, 3, 0, 2, 1, 3, 2, 3, 0, 2, 2, 1, 2, 2, 1, 0, 3, 1, 0, 1, 2, 3, 1, 0, 3, 0, 2, 2, 1, 2},
                {2, 3, 0, 3, 0, 1, 0, 1, 0, 3, 2, 2, 2, 3, 3, 2, 2, 0, 1, 1, 0, 1, 2, 2, 1, 3, 0, 2, 3, 1, 1, 0, 1, 1, 2, 3, 1, 0, 2, 3, 2},
                {2, 2, 2, 1, 1, 3, 2, 3, 1, 0, 1, 0, 3, 0, 0, 1, 0, 3, 2, 3, 3, 1, 0, 2, 3, 0, 3, 0, 1, 1, 3, 1, 0, 3, 2, 2, 3, 2, 2, 2, 2},
                {2, 2, 3, 2, 1, 0, 2, 3, 1, 0, 3, 2, 0, 3, 3, 1, 1, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 3, 3, 2, 2, 3, 1, 0, 2, 1, 0, 2, 1, 0, 2},
                {2, 2, 2, 1, 1, 1, 0, 2, 3, 3, 0, 1, 2, 0, 1, 1, 0, 3, 0, 2, 2, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 2, 1, 2, 2, 3, 2, 3, 2, 3, 0},
                {2, 2, 1, 1, 0, 3, 2, 0, 2, 1, 1, 2, 3, 3, 2, 3, 3, 0, 2, 2, 2, 1, 1, 0, 3, 1, 3, 0, 3, 0, 0, 2, 3, 0, 1, 0, 0, 2, 2, 2, 2},
                {2, 2, 3, 2, 3, 0, 1, 2, 1, 2, 3, 0, 2, 2, 3, 2, 1, 1, 0, 2, 1, 2, 1, 3, 2, 3, 0, 3, 0, 1, 3, 0, 2, 3, 1, 1, 1, 0, 0, 1, 0},
                {2, 1, 0, 3, 1, 1, 2, 0, 3, 0, 1, 2, 0, 2, 2, 2, 3, 2, 3, 2, 2, 1, 3, 0, 2, 1, 2, 1, 1, 2, 1, 1, 0, 2, 1, 2, 3, 1, 2, 3, 2},
                {2, 3, 2, 1, 1, 2, 1, 2, 2, 3, 1, 0, 3, 0, 0, 1, 0, 1, 2, 2, 1, 2, 3, 0, 1, 2, 1, 1, 3, 0, 1, 1, 3, 0, 3, 0, 2, 3, 0, 2, 2},
                {2, 2, 2, 3, 2, 1, 2, 1, 0, 2, 3, 1, 0, 3, 1, 1, 2, 3, 0, 1, 1, 0, 1, 2, 1, 0, 3, 2, 1, 2, 3, 1, 1, 2, 3, 1, 0, 1, 1, 0, 2},
                {2, 2, 3, 0, 1, 0, 1, 1, 2, 2, 1, 1, 2, 1, 2, 3, 0, 1, 1, 1, 3, 3, 2, 0, 3, 2, 2, 3, 2, 2, 2, 2, 3, 0, 1, 2, 1, 1, 2, 3, 0},
                {2, 2, 3, 1, 1, 1, 2, 3, 0, 2, 1, 1, 2, 3, 0, 2, 3, 1, 2, 3, 0, 0, 1, 3, 0, 2, 0, 2, 0, 1, 0, 2, 3, 1, 1, 0, 3, 1, 2, 1, 2},
                {2, 2, 1, 2, 3, 0, 2, 2, 2, 2, 3, 1, 0, 2, 2, 2, 1, 2, 1, 0, 3, 3, 2, 2, 2, 1, 2, 1, 1, 1, 3, 1, 0, 1, 1, 1, 3, 2, 0, 3, 2},
                {2, 1, 0, 1, 0, 3, 0, 1, 0, 2, 2, 1, 2, 1, 0, 2, 1, 2, 2, 3, 0, 2, 2, 1, 0, 3, 1, 1, 2, 2, 2, 2, 3, 3, 1, 1, 0, 1, 2, 2, 2},
                {3, 3, 1, 1, 2, 1, 1, 1, 3, 0, 1, 3, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 3, 1, 0, 3, 2, 1, 2, 2, 1, 0, 2, 1, 1, 1, 1, 0, 2, 2},
                {2, 2, 1, 2, 1, 1, 2, 3, 0, 3, 1, 0, 3, 0, 1, 0, 1, 1, 0, 2, 2, 1, 1, 0, 3, 1, 0, 1, 2, 0, 1, 1, 2, 2, 3, 2, 3, 1, 1, 0, 2},
                {2, 1, 1, 0, 3, 3, 0, 3, 2, 1, 1, 1, 0, 3, 2, 3, 2, 3, 2, 2, 1, 3, 3, 1, 2, 1, 1, 2, 2, 3, 2, 3, 0, 2, 2, 2, 2, 2, 3, 1, 0},
                {2, 3, 3, 2, 2, 3, 2, 2, 2, 3, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0, 2, 3, 2, 2, 1, 2, 1, 1, 0, 1, 2, 1, 0, 2, 3, 2, 2},
                {2, 0, 2, 1, 0, 0, 2, 2, 2, 2, 3, 1, 0, 1, 1, 2, 1, 1, 3, 1, 0, 2, 3, 2, 1, 2, 1, 0, 3, 0, 3, 1, 2, 1, 0, 1, 1, 1, 0, 1, 0},
                {2, 3, 0, 1, 1, 2, 2, 2, 2, 2, 2, 3, 2, 3, 0, 1, 3, 0, 3, 3, 2, 2, 2, 1, 2, 2, 2, 3, 1, 1, 0, 2, 1, 3, 1, 1, 3, 1, 0, 3, 2},
                {2, 2, 1, 1, 2, 2, 2, 2, 1, 0, 2, 2, 2, 1, 3, 0, 1, 3, 0, 2, 0, 2, 1, 2, 1, 0, 2, 1, 0, 3, 2, 2, 3, 1, 0, 3, 0, 3, 3, 0, 2},
                {2, 1, 3, 1, 0, 2, 2, 3, 1, 0, 1, 0, 1, 1, 0, 3, 2, 3, 2, 1, 2, 1, 2, 1, 1, 2, 3, 1, 3, 0, 2, 1, 0, 1, 1, 1, 2, 0, 2, 3, 2},
                {2, 2, 2, 3, 2, 1, 0, 2, 3, 1, 1, 1, 2, 1, 3, 0, 1, 0, 1, 2, 1, 2, 1, 3, 2, 2, 1, 0, 1, 2, 0, 3, 1, 1, 1, 2, 1, 1, 0, 0, 2},
                {2, 2, 1, 2, 3, 3, 2, 2, 1, 3, 1, 0, 1, 2, 1, 2, 1, 2, 2, 2, 3, 1, 0, 2, 0, 1, 1, 3, 0, 1, 3, 1, 2, 1, 2, 2, 2, 3, 1, 1, 0},
                {2, 3, 1, 0, 0, 2, 1, 2, 1, 0, 3, 2, 3, 2, 3, 0, 3, 0, 1, 0, 2, 3, 2, 1, 3, 1, 0, 1, 1, 0, 1, 2, 1, 1, 0, 2, 1, 0, 1, 1, 2},
                {2, 1, 1, 1, 2, 1, 2, 2, 3, 2, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 2, 3, 1, 1, 1, 3, 2, 1, 2, 3, 2, 2, 3, 2, 3, 2, 2},
                {2, 2, 3, 2, 2, 1, 0, 2, 2, 1, 1, 2, 1, 1, 1, 1, 3, 1, 0, 2, 2, 0, 1, 0, 0, 1, 1, 0, 3, 0, 1, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2},
                {2, 2, 2, 1, 0, 3, 1, 0, 3, 2, 2, 1, 3, 1, 1, 2, 1, 2, 3, 0, 1, 3, 2, 3, 1, 1, 3, 3, 0, 3, 2, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0},
                {2, 3, 0, 1, 1, 1, 2, 3, 0, 2, 2, 3, 0, 3, 1, 1, 0, 1, 0, 3, 2, 2, 2, 0, 3, 1, 0, 0, 3, 0, 2, 0, 3, 1, 0, 1, 3, 1, 1, 2, 2},
                {2, 2, 3, 1, 1, 0, 1, 1, 0, 2, 2, 1, 2, 1, 1, 1, 3, 1, 0, 2, 2, 2, 1, 1, 0, 3, 1, 2, 3, 0, 1, 2, 1, 1, 0, 3, 0, 3, 2, 1, 0},
                {2, 2, 1, 1, 2, 3, 2, 3, 1, 0, 1, 1, 0, 1, 3, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 0, 2, 1, 2, 2, 1, 2, 3, 2, 2, 3, 0, 1, 1, 2},
                {2, 2, 1, 2, 2, 2, 1, 0, 3, 1, 3, 1, 2, 3, 0, 0, 3, 1, 2, 0, 1, 2, 3, 1, 0, 3, 2, 3, 2, 2, 2, 3, 0, 2, 2, 2, 1, 2, 3, 2, 2},
                {2, 1, 3, 0, 1, 1, 1, 1, 0, 1, 0, 3, 0, 1, 1, 1, 0, 3, 0, 3, 2, 1, 0, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 0, 2, 1, 1, 0, 2, 2, 3},
                {2, 3, 0, 3, 2, 3, 1, 1, 1, 2, 3, 0, 3, 3, 2, 3, 2, 1, 1, 2, 2, 3, 1, 3, 1, 1, 0, 2, 3, 0, 3, 1, 0, 3, 0, 3, 1, 1, 0, 1, 2},
                {2, 2, 3, 0, 1, 0, 1, 2, 3, 1, 0, 3, 0, 0, 1, 0, 2, 3, 2, 0, 2, 1, 2, 2, 3, 1, 3, 0, 3, 0, 1, 2, 2, 3, 1, 1, 0, 3, 0, 3, 2},
                {2, 2, 1, 2, 3, 1, 1, 0, 1, 2, 3, 0, 3, 2, 2, 3, 0, 2, 1, 3, 1, 2, 2, 1, 0, 2, 1, 1, 0, 3, 1, 0, 2, 1, 1, 1, 1, 0, 3, 0, 0},
                {2, 1, 2, 2, 2, 3, 2, 3, 2, 1, 0, 3, 0, 2, 2, 1, 0, 2, 2, 2, 1, 0, 2, 3, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 3, 1, 3, 1, 2, 3, 2},
                {2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 2, 2, 3, 0, 1, 1, 3, 0, 2, 1, 1, 1, 0, 1, 1, 1, 2, 2, 1, 3, 2, 1, 3, 2, 1, 2, 2, 3, 0, 0, 2},
                {2, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0}
             };   

            maze.Should().BeEquivalentTo(expectation);
        }
    }
}